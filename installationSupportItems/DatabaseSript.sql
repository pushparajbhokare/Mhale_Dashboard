USE [NEW_QDAS]
GO
EXEC sp_configure 'remote query timeout', 0 ;
--ref: https://learn.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-remote-query-timeout-server-configuration-option?view=sql-server-ver16  
GO  
RECONFIGURE ;  
GO 
/****** Object:  StoredProcedure [dbo].[GetAlarmDetails]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE     PROCEDURE [dbo].[GetAlarmDetails]

(
	@TEWERKSTATT NVARCHAR(80),
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN

SELECT DISTINCT
  T.TEWERKSTATT AS LINE,
  MEMERKBEZ AS characteristics,
  TEBEZEICH AS PART,
  AV.ALARM_EW,
  AV.K0000,
  AV.K1000,
  AV.K2000,
  CASE
    WHEN AV.ALARM_EW = 0 THEN 'OK'
    WHEN AV.ALARM_EW = 1 THEN 'VALUE OUTSIDE UCL'
    WHEN AV.ALARM_EW = 2 THEN 'VALUE OUTSIDE LCL'
    WHEN AV.ALARM_EW = 4 THEN 'VALUE OUTSIDE UPPER SCRAP LIMIT'
    WHEN AV.ALARM_EW = 8 THEN 'VALUE OUTSIDE LOWER SCRAP LIMIT'
    WHEN AV.ALARM_EW = 16 THEN 'VALUE OUTSIDE UPPER WARNING LIMIT'
    WHEN AV.ALARM_EW = 32 THEN 'VALUE OUTSIDE LOWER WARNING LIMIT'
    WHEN AV.ALARM_EW = 64 THEN 'VALUE OUTSIDE UPPER ACCEPTANCE LIMIT'
    WHEN AV.ALARM_EW = 128 THEN 'VALUE OUTSIDE LOWER ACCEPTANCE LIMIT'
    WHEN AV.ALARM_EW = 256 THEN 'VALUE ELIMINATED FROM STRATEGY'
  END AS ALARM,
  CASE
    WHEN AV.ALARM_EW = 0 THEN 'ACCEPTED'
    WHEN AV.ALARM_EW = 16 OR AV.ALARM_EW = 32 THEN 'WARNING'
    ELSE 'REJECTED'
  END AS STATUS
FROM
  ALARM_VALUES AV
  JOIN TEIL T ON AV.k1000 = T.TETEIL
  JOIN MERKMAL M ON AV.K2000 = M.MEMERKMAL
  JOIN WERTEVAR W ON AV.K0000 = W.WVWERTNR
	WHERE T.TEWERKSTATT =  @TEWERKSTATT
	
	AND CONVERT(DATE, W.WVDATZEIT) >= CONVERT(DATE, @FromDate)
			AND CONVERT(DATE, W.WVDATZEIT) <= CONVERT(DATE, @ToDate)
	  

GROUP BY MEMERKBEZ, T.TEWERKSTATT, TEBEZEICH,
AV.ALARM_EW, AV.K0000, AV.K1000, AV.K2000 


END
GO
/****** Object:  StoredProcedure [dbo].[GetAllCharacteristicsInfo]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllCharacteristicsInfo]
(
	@TEWERKSTATT NVARCHAR(80),
	@TEARBEITSGANG NVARCHAR(80),
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN
	SELECT ROW_NUMBER() OVER(ORDER BY LINE) AS SR_NO,LINE, OPERATION, PART_DESC, PARAMETER, PARAMETER_DESC,
	MCLASS, AVG, STDEV, MEUGW, MEOGW,
	(MEOGW - MEUGW) / (6 * STDEV) AS PP,
	(CASE WHEN STDEV > 0 THEN (ROUND(MEOGW, 4) - ROUND(AVG, 4)) / (3 * ROUND(STDEV, 4)) ELSE 0 END) AS PPU,
	(CASE WHEN STDEV > 0 THEN (ROUND(AVG, 4) - ROUND(MEUGW, 4)) / (3 * ROUND(STDEV, 4)) ELSE 0 END) AS PPL,
	(SELECT MIN(x)
	FROM (VALUES
			((CASE WHEN STDEV > 0 THEN (ROUND(MEOGW, 4) - ROUND(AVG, 4)) / (3 * ROUND(STDEV, 4)) ELSE 0 END)),
			((CASE WHEN STDEV > 0 THEN (ROUND(AVG, 4) - ROUND(MEUGW, 4)) / (3 * ROUND(STDEV, 4)) ELSE 0 END))) AS value(x)) AS PPK
	FROM
	(
		SELECT LINE, OPERATION, PART_DESC, PARAMETER, PARAMETER_DESC,
		MCLASS, AVG(WVWERT) AS AVG, STDEV(WVWERT) AS STDEV, MEUGW, MEOGW
		FROM
		(
			SELECT ISNULL(T.TEWERKSTATT, '-') AS LINE, ISNULL(T.TEARBEITSGANG, '-') AS OPERATION,
			T.TEBEZEICH AS PART_DESC, M.MEMERKMAL AS PARAMETER, M.MEMERKBEZ AS PARAMETER_DESC,
			(CASE WHEN M.MEMERKKLASSE = 2 THEN 'MINOR'
				WHEN M.MEMERKKLASSE = 3 THEN 'MAJOR'
				WHEN M.MEMERKKLASSE = 4 THEN 'CRITICAL'
				ELSE '' END) AS MCLASS,
			ISNULL(W.WVWERT, 0) AS WVWERT, ISNULL(M.MEUGW, 0) AS MEUGW, ISNULL(M.MEOGW, 0) AS MEOGW
			FROM MERKMAL M
			INNER JOIN TEIL T ON T.TETEIL = M.METEIL
			INNER JOIN WERTEVAR W ON M.METEIL = W.WVTEIL
			WHERE T.TEWERKSTATT = @TEWERKSTATT
			AND TEARBEITSGANG = @TEARBEITSGANG
			AND CONVERT(DATE, W.WVDATZEIT) >= CONVERT(DATE, @FromDate)
			AND CONVERT(DATE, W.WVDATZEIT) <= CONVERT(DATE, @ToDate)
		) AS A
		GROUP BY LINE, OPERATION, PART_DESC, PARAMETER, PARAMETER_DESC, MCLASS, MEUGW, MEOGW
	) AS B
	--GROUP BY LINE, OPERATION, PART_DESC, PARAMETER, PARAMETER_DESC, MEUGW, MEOGW
END

GO
/****** Object:  StoredProcedure [dbo].[GetAllPartSummary]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE     PROCEDURE [dbo].[GetAllPartSummary]
(
	@TEWERKSTATT NVARCHAR(80),
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN


SELECT ROW_NUMBER() OVER(ORDER BY LINE) AS SR_NO, LINE, PART_DESC,SUM(TOTAL) AS TOTAL,SUM(OK) AS OK,SUM(NOT_OK) AS NOT_OK,  CAST(SUM(OK) AS FLOAT) / SUM(TOTAL) * 100 AS OK_PER,
CAST(SUM(NOT_OK) AS FLOAT) / SUM(TOTAL) * 100 AS NOT_OK_PER  FROM(

SELECT LINE, TOTAL, OK, NOT_OK,  CAST(SUM(OK) AS FLOAT) / SUM(TOTAL) * 100 AS OK_PER,PART_DESC,
CAST(SUM(NOT_OK) AS FLOAT) / SUM(TOTAL) * 100 AS NOT_OK_PER
FROM
(

SELECT  LINE, C_PLAN, COUNT(TNR) AS TOTAL, SUM(OK) AS OK,PART_DESC,
SUM(NOK) AS NOT_OK  FROM(

 SELECT LINE, C_PLAN, OPERATION, TNR, (CASE WHEN SUM(NOK) > 0 THEN 0 ELSE 1 END) AS OK,PART_DESC,
		1 - (CASE WHEN SUM(NOK) > 0 THEN 0 ELSE 1 END) AS NOK
	
		FROM
		(
			SELECT  T.TEWERKSTATT AS LINE,TETEIL AS C_PLAN, WVWERTNR AS TNR, TEARBEITSGANG AS OPERATION,TEBEZEICH AS PART_DESC,
			(CASE WHEN W.WVWERT >= M.MEUGW  AND  W.WVWERT <= M.MEOGW THEN 1 ELSE 0 END) AS OK,
			(CASE WHEN W.WVWERT < M.MEUGW OR W.WVWERT > M.MEOGW THEN 1 ELSE 0 END) AS NOK
	
			FROM WERTEVAR W
			INNER JOIN MERKMAL M
			ON W.WVTEIL = M.METEIL
			AND W.WVMERKMAL = M.MEMERKMAL
			INNER JOIN TEIL T
			ON W.WVTEIL = T.TETEIL
		
		  	WHERE (T.TEWERKSTATT = @TEWERKSTATT OR ISNULL(@TEWERKSTATT, '') = '' OR ISNULL(@TEWERKSTATT, '-') = '-')
			AND T.TEWERKSTATT IS NOT NULL
			AND CONVERT(DATE, W.WVDATZEIT) >= CONVERT(DATE, @FromDate)
			AND CONVERT(DATE, W.WVDATZEIT) <= CONVERT(DATE, @ToDate)
		
		
		) A
	GROUP BY  LINE, C_PLAN, TNR, OPERATION,PART_DESC

	)AS B 

	GROUP BY LINE, C_PLAN,PART_DESC

)AS C

GROUP BY  TOTAL, OK, NOT_OK, LINE,PART_DESC

)AS D

GROUP BY LINE,PART_DESC

END
GO
/****** Object:  StoredProcedure [dbo].[GetCharacteristicsInfo]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCharacteristicsInfo]
(
	@TEWERKSTATT NVARCHAR(80),
	@TEARBEITSGANG NVARCHAR(80),
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN SELECT ROW_NUMBER() OVER(ORDER BY OPERATION) AS SR_NO, PART, OPERATION, CHAR_ID, CHAR_NAME,MCLASS,
	SUM(OK) AS OK, SUM(NOT_OK) AS NOT_OK, SUM(OK) + SUM(NOT_OK) AS TOTAL,
	(case when  SUM(NOT_OK) = 0 THEN 'OK'  ELSE 'NOT OK'  END ) AS STATUS 
	FROM
	(
		SELECT (CASE WHEN ISNULL(W.WVWERT, 0) BETWEEN ISNULL(M.MEUGW, 0) AND ISNULL(M.MEOGW, 0) THEN 1 ELSE 0 END) AS OK,
		(CASE WHEN ISNULL(W.WVWERT, 0) NOT BETWEEN ISNULL(M.MEUGW, 0) AND ISNULL(M.MEOGW, 0) THEN 1 ELSE 0 END) AS NOT_OK,
		T.TETEIL AS PART, ISNULL(T.TEARBEITSGANG, '-') AS OPERATION, M.MEMERKKLASSE AS MCLASS,
		--(CASE WHEN M.MEMERKKLASSE = 2 THEN 'MINOR'
		--		WHEN M.MEMERKKLASSE = 3 THEN 'MAJOR'
		--		WHEN M.MEMERKKLASSE = 4 THEN 'CRITICAL'
		--		ELSE '' END) AS MCLASS,
		M.MEMERKNR AS CHAR_ID,
		M.MEMERKBEZ AS CHAR_NAME
		FROM MERKMAL M 
		INNER JOIN TEIL T
		ON T.TETEIL = M.METEIL
		INNER JOIN WERTEVAR W
		ON M.METEIL = W.WVTEIL
		AND M.MEMERKNR = W.WVMERKMAL
		WHERE T.TEWERKSTATT = @TEWERKSTATT
		AND T.TEARBEITSGANG =@TEARBEITSGANG 
		AND CONVERT(DATE, W.WVDATZEIT) >= CONVERT(DATE, @FromDate)
	    AND CONVERT(DATE, W.WVDATZEIT) <= CONVERT(DATE, @ToDate)
	) AS A
	GROUP BY PART, OPERATION, CHAR_ID, CHAR_NAME, MCLASS
	ORDER BY (CASE WHEN ISNUMERIC(CHAR_ID) = 1 THEN CONVERT(INT, CHAR_ID) ELSE 1 END)
END
GO
/****** Object:  StoredProcedure [dbo].[GetDashboardAlarm]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE PROCEDURE [dbo].[GetDashboardAlarm]
(
	
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN

SELECT  LINE, SUM(OK) AS OK, SUM(NOT_OK) AS NOT_OK FROM 
(
SELECT  ROW_NUMBER()OVER(ORDER BY LINE ) AS SR_NO, LINE, OPERATION ,
  COUNT(CAST(ALARM_EW AS INT)) AS TOTAL,
  SUM(CAST(OK_COUNT AS INT)) AS OK,
  SUM(CAST(NOT_OK_COUNT AS INT)) AS NOT_OK

FROM 
(
SELECT  
 T.TEWERKSTATT AS LINE, T.TEARBEITSGANG AS OPERATION,
 A.ALARM_DATETIME, A.ALARM_EW, A.K1000,
 CASE WHEN A.ALARM_EW = 0 THEN '1' ELSE '0' END AS OK_COUNT ,
 CASE WHEN A.ALARM_EW > 0 THEN '1' ELSE '0' END AS NOT_OK_COUNT
 FROM TEIL T  INNER JOIN ALARM_VALUES A ON T.TETEIL = A.K1000 
WHERE 
		CONVERT(DATE, A.ALARM_DATETIME) >= CONVERT(DATE, @FromDate)
       AND CONVERT(DATE, A.ALARM_DATETIME) <= CONVERT(DATE, @ToDate)	
	
)AS A
GROUP BY LINE,OPERATION


) AS B 
GROUP BY LINE

END
GO
/****** Object:  StoredProcedure [dbo].[GetOperationListWithFTT]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE     PROCEDURE [dbo].[GetOperationListWithFTT]
(
	@TEWERKSTATT NVARCHAR(80),
	--@TEARBEITSGANG NVARCHAR(80),
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN

SELECT  LINE, OPERATION, TOTAL, ACCEPTED, REJECTED , ACCEPTED AS OK, REJECTED AS NOT_OK, 
CAST(SUM(ACCEPTED) AS FLOAT) / SUM(TOTAL) * 100 AS ACCEPTED_PER,
	
	CAST(SUM(REJECTED) AS FLOAT) / SUM(TOTAL) * 100 AS REJECTED_PER,
	CAST(SUM(ACCEPTED) AS FLOAT) / SUM(TOTAL) * 100 AS OK_PER,
	CAST(SUM(REJECTED) AS FLOAT) / SUM(TOTAL) * 100 AS NOT_OK_PER,

	(CASE WHEN MAX(REJECTED) > 0 THEN 'REJECTED' ELSE 'ACCEPTED' END) AS OP_STATUS
	FROM(

SELECT LINE, TOTAL, OPERATION, ACCEPTED, REJECTED , ACCEPTED AS OK, REJECTED AS NOT_OK
FROM
(
SELECT  LINE, C_PLAN,OPERATION, COUNT(TNR) AS TOTAL, SUM(OK) AS ACCEPTED,
SUM(NOT_OK) AS REJECTED  FROM(

 SELECT LINE, C_PLAN, OPERATION, TNR, (CASE WHEN SUM(REJECTED) > 0 THEN 0 ELSE 1 END) AS OK,
		1 - (CASE WHEN SUM(REJECTED) > 0 THEN 0 ELSE 1 END) AS NOT_OK
	
		FROM
		(
			SELECT  T.TEWERKSTATT AS LINE,TETEIL AS C_PLAN, WVWERTNR AS TNR, TEARBEITSGANG AS OPERATION,
			(CASE WHEN W.WVWERT >= M.MEUGW  AND  W.WVWERT <= M.MEOGW THEN 1 ELSE 0 END) AS ACCEPTED,
			(CASE WHEN W.WVWERT < M.MEUGW OR W.WVWERT > M.MEOGW THEN 1 ELSE 0 END) AS REJECTED
	
			FROM WERTEVAR W
			INNER JOIN MERKMAL M
			ON W.WVTEIL = M.METEIL
			AND W.WVMERKMAL = M.MEMERKMAL
			INNER JOIN TEIL T
			ON W.WVTEIL = T.TETEIL
		
		 WHERE T.TEWERKSTATT = @TEWERKSTATT
			AND  CONVERT(DATE, W.WVDATZEIT) >= CONVERT(DATE, @FromDate)
			AND CONVERT(DATE, W.WVDATZEIT) <= CONVERT(DATE, @ToDate)
		
		) A
	GROUP BY  LINE, C_PLAN, TNR, OPERATION
	)AS B 
	GROUP BY LINE, C_PLAN,OPERATION

)AS C

GROUP BY LINE, TOTAL, ACCEPTED, REJECTED,OPERATION

)AS D
GROUP BY LINE, TOTAL, ACCEPTED, REJECTED ,OK,  NOT_OK ,OPERATION
END




GO
/****** Object:  StoredProcedure [dbo].[GetOperationPartStatus]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE     PROCEDURE [dbo].[GetOperationPartStatus]

(
	@TEWERKSTATT NVARCHAR(80),
	@TEARBEITSGANG NVARCHAR(80),
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN


SELECT ROW_NUMBER() OVER(ORDER BY LINE) AS SR_NO, 1 AS COUNT,	
(CASE WHEN MAX(REJECTED) > 0 THEN 'REJECTED' ELSE 'ACCEPTED' END) AS STATUS,
LINE,  OPERATION, MODEL 

	
		FROM
		(
			SELECT  T.TEWERKSTATT AS LINE,TETEIL AS C_PLAN, WVWERTNR AS TNR, TEARBEITSGANG AS OPERATION,TETYP AS MODEL, 
			(CASE WHEN W.WVWERT >= M.MEUGW  AND  W.WVWERT <= M.MEOGW THEN 1 ELSE 0 END) AS ACCEPTED,
			(CASE WHEN W.WVWERT < M.MEUGW OR W.WVWERT > M.MEOGW THEN 1 ELSE 0 END) AS REJECTED
	
			FROM WERTEVAR W
			INNER JOIN MERKMAL M
			ON W.WVTEIL = M.METEIL
			AND W.WVMERKMAL = M.MEMERKMAL
			INNER JOIN TEIL T
			ON W.WVTEIL = T.TETEIL
		
		WHERE T.TEWERKSTATT =  @TEWERKSTATT
	AND T.TEARBEITSGANG = @TEARBEITSGANG
	AND CONVERT(DATE, W.WVDATZEIT) >= CONVERT(DATE, @FromDate)
			AND CONVERT(DATE, W.WVDATZEIT) <= CONVERT(DATE, @ToDate)
	  
		) A
	GROUP BY  LINE, C_PLAN, TNR, OPERATION,MODEL

END

GO
/****** Object:  StoredProcedure [dbo].[GetPartSummary]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[GetPartSummary]
(
	@TEWERKSTATT NVARCHAR(80),
	@TEARBEITSGANG NVARCHAR(80),
	@MEMERKBEZ NVARCHAR(160) = NULL,
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN
	SELECT ROW_NUMBER() OVER(ORDER BY LINE) AS SR_NO,  OPERATION , COUNT(CASE WHEN STATUS IN ('REJECTED', 'WARNING' )THEN 1 END) AS NOT_OK,
	COUNT(CASE WHEN STATUS = 'ACCEPTED' THEN 1 END) AS OK,
	SUM(CHARACTERISTICS) AS TOTAL
 
	FROM 
	(
		SELECT ROW_NUMBER() OVER(ORDER BY T.TETEIL) AS SR_NO, TETEIL, 1 AS CHARACTERISTICS,
		(CASE WHEN ISNULL(W.WVWERT, 0) BETWEEN ISNULL(M.MEUGW, 0) AND ISNULL(M.MEOGW, 0) THEN 'ACCEPTED' WHEN ISNULL(W.WVWERT, 0) < ISNULL(M.MEUGW, 0) THEN 'WARNING' WHEN ISNULL(W.WVWERT, 0) > ISNULL(M.MEOGW, 0) THEN 'REJECTED' ELSE '' END) AS STATUS,
		ISNULL(T.TEWERKSTATT, '-') AS LINE, ISNULL(T.TEARBEITSGANG, '-') AS OPERATION
		FROM MERKMAL M
		INNER JOIN TEIL T
		ON T.TETEIL = M.METEIL
		INNER JOIN WERTEVAR W
		ON M.METEIL = W.WVTEIL AND  M.MEMERKMAL = W.WVMERKMAL
		WHERE T.TEWERKSTATT = @TEWERKSTATT
		AND T.TEARBEITSGANG = @TEARBEITSGANG
		AND CONVERT(DATE, W.WVDATZEIT) >= CONVERT(DATE, @FromDate)
		AND CONVERT(DATE, W.WVDATZEIT) <= CONVERT(DATE, @ToDate)
		AND (ISNULL(@MEMERKBEZ, '') = '' OR MEMERKBEZ = @MEMERKBEZ)
	) AS A
	GROUP BY LINE,OPERATION;
END

GO
/****** Object:  StoredProcedure [dbo].[GetProcessPerformance]    Script Date: 7/5/2023 8:43:01 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
   
   CREATE        PROCEDURE [dbo].[GetProcessPerformance]
(
	@TEWERKSTATT NVARCHAR(80),
	@TEARBEITSGANG NVARCHAR(80),
	@FromDate DATETIME,
	@ToDate DATETIME
)
AS
BEGIN
SELECT ROW_NUMBER() OVER(ORDER BY LINE) AS SR_NO,  LINE, OPERATION, COUNT(TNR) AS TOTAL, SUM(OK) AS OK,
SUM(NOK) AS REWORK  FROM(

 SELECT LINE, C_PLAN, OPERATION, TNR, (CASE WHEN SUM(NOK) > 0 THEN 0 ELSE 1 END) AS OK,
		1 - (CASE WHEN SUM(NOK) > 0 THEN 0 ELSE 1 END) AS NOK
	
		FROM
		(
			SELECT  T.TEWERKSTATT AS LINE,TETEIL AS C_PLAN, WVWERTNR AS TNR, TEARBEITSGANG AS OPERATION,
			(CASE WHEN W.WVWERT >= M.MEUGW  AND  W.WVWERT <= M.MEOGW THEN 1 ELSE 0 END) AS OK,
			(CASE WHEN W.WVWERT < M.MEUGW OR W.WVWERT > M.MEOGW THEN 1 ELSE 0 END) AS NOK
	
			FROM WERTEVAR W
			INNER JOIN MERKMAL M
			ON W.WVTEIL = M.METEIL
			AND W.WVMERKMAL = M.MEMERKMAL
			INNER JOIN TEIL T
			ON W.WVTEIL = T.TETEIL
				WHERE T.TEWERKSTATT = @TEWERKSTATT AND
		 (T.TEARBEITSGANG = @TEARBEITSGANG OR ISNULL(@TEARBEITSGANG, '') = '' OR ISNULL(@TEARBEITSGANG, '-') = '-')
		AND CONVERT(DATE, W.WVDATZEIT) >= CONVERT(DATE, @FromDate)
			AND CONVERT(DATE, W.WVDATZEIT) <= CONVERT(DATE, @ToDate)

		
		
		) A
	GROUP BY  LINE, C_PLAN, TNR, OPERATION

	)AS B 

	GROUP BY LINE, C_PLAN,OPERATION

	END
GO
